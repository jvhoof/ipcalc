name: Azure VNET Deployment Test

on:
  workflow_dispatch:  # Allow manual trigger with parameters
    inputs:
      deployment_method:
        description: 'Deployment method to use'
        required: true
        type: choice
        options:
          - arm-template
          - azure-cli
        default: 'arm-template'
      prefix:
        description: 'Resource prefix for naming'
        required: false
        default: 'ipcalc-qa'
      location:
        description: 'Azure region'
        required: false
        default: 'swedencentral'
      vnet_cidr:
        description: 'VNET CIDR block'
        required: false
        default: '172.16.1.0/24'
      subnet_count:
        description: 'Number of subnets to create'
        required: false
        default: '4'
  push:
    branches:
      - beta  # Trigger on push to main branch
  pull_request:
    paths:
      - 'src/templates/azure/**'
      - '.github/workflows/azure-vnet-test.yml'

env:
  AZURE_RESOURCE_GROUP: ${{ github.event.inputs.prefix || 'ipcalc-test' }}-rg
  AZURE_LOCATION: ${{ github.event.inputs.location || 'swedencentral' }}
  VNET_NAME: ${{ github.event.inputs.prefix || 'ipcalc-qa' }}-vnet
  VNET_CIDR: ${{ github.event.inputs.vnet_cidr || '172.16.1.0/24' }}

jobs:
  deploy-with-arm-template:
    name: Deploy and Test with ARM Template
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_method == 'arm-template' || github.event.inputs.deployment_method == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Generate ARM Template using ipcalc CLI
        id: generate-template
        run: |
          echo "Generating ARM template using ipcalc CLI..."
          echo "Parameters:"
          echo "  Provider: azure"
          echo "  CIDR: ${{ env.VNET_CIDR }}"
          echo "  Subnets: ${{ github.event.inputs.subnet_count || '2' }}"

          # Generate ARM template using ipcalc CLI
          npm run cli -- \
            --provider azure \
            --cidr ${{ env.VNET_CIDR }} \
            --subnets ${{ github.event.inputs.subnet_count || '2' }} \
            --output arm \
            --file /tmp/test-arm-template.json

          echo "ARM template generated successfully"
          echo "Template contents:"
          cat /tmp/test-arm-template.json

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          echo "Creating resource group: ${{ env.AZURE_RESOURCE_GROUP }}"
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=Test ManagedBy=GitHubActions

      - name: Deploy ARM Template
        id: deploy
        run: |
          echo "Deploying ARM template..."
          DEPLOYMENT_NAME="vnet-deployment-${{ github.run_id }}"

          az deployment group create \
            --name "$DEPLOYMENT_NAME" \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file /tmp/test-arm-template.json \
            --parameters vnetCidr="${{ env.VNET_CIDR }}" \
            --output json > /tmp/deployment-output.json

          cat /tmp/deployment-output.json

          # Extract outputs
          VNET_NAME=$(jq -r '.properties.outputs.vnetName.value' /tmp/deployment-output.json)
          VNET_ID=$(jq -r '.properties.outputs.vnetId.value' /tmp/deployment-output.json)

          echo "vnet_name=$VNET_NAME" >> $GITHUB_OUTPUT
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT

          echo "✅ Deployment completed successfully"
          echo "VNET Name: $VNET_NAME"
          echo "VNET ID: $VNET_ID"

      - name: Validate Deployment
        id: validate
        run: |
          echo "🔍 Validating deployment..."

          # Check if VNET exists
          echo "Checking if VNET ${{ env.VNET_NAME }} exists..."
          VNET_EXISTS=$(az network vnet show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.VNET_NAME }} \
            --query "name" -o tsv 2>/dev/null || echo "")

          if [ -z "$VNET_EXISTS" ]; then
            echo "❌ VNET not found!"
            exit 1
          fi
          echo "✅ VNET exists: $VNET_EXISTS"

          # Validate VNET CIDR
          echo "Validating VNET address space..."
          VNET_ADDRESS=$(az network vnet show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.VNET_NAME }} \
            --query "addressSpace.addressPrefixes[0]" -o tsv)

          if [ "$VNET_ADDRESS" != "${{ env.VNET_CIDR }}" ]; then
            echo "❌ VNET CIDR mismatch! Expected: ${{ env.VNET_CIDR }}, Got: $VNET_ADDRESS"
            exit 1
          fi
          echo "✅ VNET CIDR is correct: $VNET_ADDRESS"

          # List and validate subnets
          echo "Listing subnets..."
          SUBNETS=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[].{name:name, prefix:addressPrefix}" -o table)

          echo "$SUBNETS"

          SUBNET_COUNT=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "length(@)" -o tsv)

          echo "✅ Found $SUBNET_COUNT subnet(s)"

          if [ "$SUBNET_COUNT" -lt 1 ]; then
            echo "❌ No subnets found!"
            exit 1
          fi

          # Validate each subnet is within VNET CIDR
          echo "Validating subnet address spaces..."
          az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[].{Name:name, AddressPrefix:addressPrefix, ProvisioningState:provisioningState}" \
            -o table

          # Check provisioning state
          FAILED_SUBNETS=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[?provisioningState!='Succeeded'].name" -o tsv)

          if [ -n "$FAILED_SUBNETS" ]; then
            echo "❌ Some subnets failed to provision: $FAILED_SUBNETS"
            exit 1
          fi

          echo "✅ All subnets provisioned successfully"
          echo "✅ Validation completed successfully!"

      - name: Generate Test Report
        if: always()
        run: |
          echo "## 📊 Azure VNET Deployment Test Report" > /tmp/test-report.md
          echo "" >> /tmp/test-report.md
          echo "**Deployment Method:** ARM Template" >> /tmp/test-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> /tmp/test-report.md
          echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> /tmp/test-report.md
          echo "**Location:** ${{ env.AZURE_LOCATION }}" >> /tmp/test-report.md
          echo "**VNET Name:** ${{ env.VNET_NAME }}" >> /tmp/test-report.md
          echo "**VNET CIDR:** ${{ env.VNET_CIDR }}" >> /tmp/test-report.md
          echo "" >> /tmp/test-report.md

          if [ "${{ steps.validate.outcome }}" == "success" ]; then
            echo "### ✅ Validation Status: PASSED" >> /tmp/test-report.md
          else
            echo "### ❌ Validation Status: FAILED" >> /tmp/test-report.md
          fi

          echo "" >> /tmp/test-report.md
          echo "### Resources Deployed:" >> /tmp/test-report.md
          echo '```' >> /tmp/test-report.md
          az resource list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} -o table >> /tmp/test-report.md || echo "Failed to list resources" >> /tmp/test-report.md
          echo '```' >> /tmp/test-report.md

          cat /tmp/test-report.md
          cat /tmp/test-report.md >> $GITHUB_STEP_SUMMARY

      - name: Cleanup Resources
        if: always()
        run: |
          echo "🧹 Cleaning up resources..."
          echo "Deleting resource group: ${{ env.AZURE_RESOURCE_GROUP }}"

          az group delete \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --yes \
            --no-wait

          echo "✅ Cleanup initiated (running in background)"
          echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} will be deleted shortly"

  deploy-with-azure-cli:
    name: Deploy and Test with Azure CLI
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_method == 'azure-cli'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Azure CLI Script using ipcalc CLI
        id: generate-script
        run: |
          echo "Generating Azure CLI script using ipcalc CLI..."
          echo "Parameters:"
          echo "  Provider: azure"
          echo "  CIDR: ${{ env.VNET_CIDR }}"
          echo "  Subnets: ${{ github.event.inputs.subnet_count || '2' }}"

          # Generate Azure CLI script using ipcalc CLI
          npm run cli -- \
            --provider azure \
            --cidr ${{ env.VNET_CIDR }} \
            --subnets ${{ github.event.inputs.subnet_count || '2' }} \
            --output cli \
            --file /tmp/deploy-vnet-generated.sh

          echo "Azure CLI script generated successfully"
          echo "Generated script contents:"
          cat /tmp/deploy-vnet-generated.sh

          # Customize the script with our specific environment values
          sed -i 's/PREFIX="myproject"/PREFIX="${{ github.event.inputs.prefix || 'ipcalc-test' }}"/' /tmp/deploy-vnet-generated.sh
          sed -i 's/LOCATION="eastus"/LOCATION="${{ env.AZURE_LOCATION }}"/' /tmp/deploy-vnet-generated.sh

          # Make it executable
          chmod +x /tmp/deploy-vnet-generated.sh

          echo "Final deployment script:"
          cat /tmp/deploy-vnet-generated.sh

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Execute Azure CLI Deployment
        id: deploy
        run: |
          echo "Executing Azure CLI deployment script..."
          /tmp/deploy-vnet-generated.sh
          echo "✅ Deployment script executed successfully"

      - name: Validate Deployment
        id: validate
        run: |
          echo "🔍 Validating deployment..."

          # Check if VNET exists
          echo "Checking if VNET ${{ env.VNET_NAME }} exists..."
          VNET_EXISTS=$(az network vnet show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.VNET_NAME }} \
            --query "name" -o tsv 2>/dev/null || echo "")

          if [ -z "$VNET_EXISTS" ]; then
            echo "❌ VNET not found!"
            exit 1
          fi
          echo "✅ VNET exists: $VNET_EXISTS"

          # Validate VNET CIDR
          echo "Validating VNET address space..."
          VNET_ADDRESS=$(az network vnet show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.VNET_NAME }} \
            --query "addressSpace.addressPrefixes[0]" -o tsv)

          if [ "$VNET_ADDRESS" != "${{ env.VNET_CIDR }}" ]; then
            echo "❌ VNET CIDR mismatch! Expected: ${{ env.VNET_CIDR }}, Got: $VNET_ADDRESS"
            exit 1
          fi
          echo "✅ VNET CIDR is correct: $VNET_ADDRESS"

          # List and validate subnets
          echo "Listing subnets..."
          SUBNETS=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[].{name:name, prefix:addressPrefix}" -o table)

          echo "$SUBNETS"

          SUBNET_COUNT=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "length(@)" -o tsv)

          echo "✅ Found $SUBNET_COUNT subnet(s)"

          if [ "$SUBNET_COUNT" -lt 1 ]; then
            echo "❌ No subnets found!"
            exit 1
          fi

          # Validate each subnet provisioning state
          echo "Validating subnet provisioning states..."
          az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[].{Name:name, AddressPrefix:addressPrefix, ProvisioningState:provisioningState}" \
            -o table

          # Check provisioning state
          FAILED_SUBNETS=$(az network vnet subnet list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --query "[?provisioningState!='Succeeded'].name" -o tsv)

          if [ -n "$FAILED_SUBNETS" ]; then
            echo "❌ Some subnets failed to provision: $FAILED_SUBNETS"
            exit 1
          fi

          echo "✅ All subnets provisioned successfully"
          echo "✅ Validation completed successfully!"

      - name: Generate Test Report
        if: always()
        run: |
          echo "## 📊 Azure VNET Deployment Test Report" > /tmp/test-report.md
          echo "" >> /tmp/test-report.md
          echo "**Deployment Method:** Azure CLI" >> /tmp/test-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> /tmp/test-report.md
          echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> /tmp/test-report.md
          echo "**Location:** ${{ env.AZURE_LOCATION }}" >> /tmp/test-report.md
          echo "**VNET Name:** ${{ env.VNET_NAME }}" >> /tmp/test-report.md
          echo "**VNET CIDR:** ${{ env.VNET_CIDR }}" >> /tmp/test-report.md
          echo "" >> /tmp/test-report.md

          if [ "${{ steps.validate.outcome }}" == "success" ]; then
            echo "### ✅ Validation Status: PASSED" >> /tmp/test-report.md
          else
            echo "### ❌ Validation Status: FAILED" >> /tmp/test-report.md
          fi

          echo "" >> /tmp/test-report.md
          echo "### Resources Deployed:" >> /tmp/test-report.md
          echo '```' >> /tmp/test-report.md
          az resource list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} -o table >> /tmp/test-report.md || echo "Failed to list resources" >> /tmp/test-report.md
          echo '```' >> /tmp/test-report.md

          cat /tmp/test-report.md
          cat /tmp/test-report.md >> $GITHUB_STEP_SUMMARY

      - name: Cleanup Resources
        if: always()
        run: |
          echo "🧹 Cleaning up resources..."
          echo "Deleting resource group: ${{ env.AZURE_RESOURCE_GROUP }}"

          az group delete \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --yes \
            --no-wait

          echo "✅ Cleanup initiated (running in background)"
          echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} will be deleted shortly"
